buildscript {
    repositories {
        mavenLocal()
        maven {url 'https://repo.grails.org/grails/core'}
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

version xhReleaseVersion
group 'io.xh'

apply plugin:'idea'
apply plugin:'org.grails.grails-plugin'

repositories {
    mavenLocal()
    maven {url 'https://repo.grails.org/grails/core'}
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    //-----------------------------------
    // Grails 4.0.6 REST Plugin Defaults
    //-----------------------------------
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:rest-api"

    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.0"

    //--------------------
    // Hoist Additions
    //--------------------
    compile "org.codehaus.groovy:groovy-dateutil:2.5.8"
    provided "org.grails:grails-plugin-domain-class"
    compile "org.grails.plugins:mail:3.0.0"

    // Quartz, with Grails 4 workaround (https://github.com/grails-plugins/grails-quartz/issues/107
    compile("org.quartz-scheduler:quartz:2.2.3") {exclude group: 'slf4j-api', module: 'c3p0'}
    compile 'org.grails.plugins:quartz:2.0.13'

    compile "org.hibernate:hibernate-core:5.4.14.Final"
    compile "net.sf.ehcache:ehcache:2.10.6"

    compile "org.apache.poi:poi:4.1.2"
    compile "org.apache.poi:poi-ooxml:4.1.2"
    compile "org.apache.poi:poi-ooxml-schemas:4.1.2"
    compile "org.apache.poi:ooxml-schemas:1.4"

    compile "org.springframework:spring-websocket"
    compile "org.apache.httpcomponents.client5:httpclient5:5.0.3"
    compile 'org.jasypt:jasypt:1.9.3'
    compile "commons-io:commons-io:2.8.0"
    runtime "net.java.dev.jna:jna:4.5.1"
    compile "org.owasp.encoder:encoder:1.2.3"
}

def allJvmArgs = [
        '-Dspring.output.ansi.enabled=always'
]
// Prevent reflection warning: See https://dev.to/erichelgeson/removing-illegal-reflective-access-warnings-in-grails-4-393o
allJvmArgs += [
        "java.management/com.sun.jmx.mbeanserver", "java.base/java.io", "java.base/java.lang", "java.base/java.lang.annotation",
        "java.base/java.lang.invoke", "java.base/java.lang.module", "java.base/java.lang.ref", "java.base/java.lang.reflect",
        "java.base/java.math", "java.base/java.net", "java.base/java.net.spi", "java.base/java.nio", "java.base/java.nio.channels",
        "java.base/java.nio.channels.spi", "java.base/java.nio.charset", "java.base/java.nio.charset.spi", "java.base/java.nio.file",
        "java.base/java.nio.file.attribute", "java.base/java.nio.file.spi", "java.base/java.security", "java.base/java.security.acl",
        "java.base/java.security.cert", "java.base/java.security.interfaces", "java.base/java.security.spec", "java.base/java.text",
        "java.base/java.text.spi", "java.base/java.time", "java.base/java.time.chrono", "java.base/java.time.format",
        "java.base/java.time.temporal", "java.base/java.time.zone", "java.base/java.util", "java.base/java.util.concurrent",
        "java.base/java.util.concurrent.atomic", "java.base/java.util.concurrent.locks", "java.base/java.util.function",
        "java.base/java.util.jar", "java.base/java.util.regex", "java.base/java.util.spi", "java.base/java.util.stream",
        "java.base/java.util.zip", "java.datatransfer/java.awt.datatransfer", "java.desktop/java.applet", "java.desktop/java.awt",
        "java.desktop/java.awt.color", "java.desktop/java.awt.desktop", "java.desktop/java.awt.dnd", "java.desktop/java.awt.dnd.peer",
        "java.desktop/java.awt.event", "java.desktop/java.awt.font", "java.desktop/java.awt.geom", "java.desktop/java.awt.im",
        "java.desktop/java.awt.im.spi", "java.desktop/java.awt.image", "java.desktop/java.awt.image.renderable",
        "java.desktop/java.awt.peer", "java.desktop/java.awt.print", "java.desktop/java.beans", "java.desktop/java.beans.beancontext",
        "java.instrument/java.lang.instrument", "java.logging/java.util.logging", "java.management/java.lang.management",
        "java.prefs/java.util.prefs", "java.rmi/java.rmi", "java.rmi/java.rmi.activation", "java.rmi/java.rmi.dgc",
        "java.rmi/java.rmi.registry", "java.rmi/java.rmi.server", "java.sql/java.sql"
].collect {"--add-opens=$it=ALL-UNNAMED".toString()}

bootRun {
    jvmArgs(allJvmArgs)
    sourceResources sourceSets.main
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = allJvmArgs
    }
}


bootJar.enabled = false


//------------------------
// Maven publishing
// This is a modified version of the gradle configs setup by the Grails plugin publishing plugin
// https://github.com/grails/grails-core/blob/master/grails-gradle-plugin/src/main/groovy/org/grails/gradle/plugin/publishing/GrailsCentralPublishGradlePlugin.groovy
// The default behavior assumes publishing of non-snapshot builds only to the paid (if private) Bintray system
//------------------------
apply plugin:'maven-publish'
publishing {
    publications {
        hoistCore(MavenPublication) {
            artifactId 'hoist-core'

            pom.withXml {
                Node pomNode = asNode()
                if (pomNode.dependencyManagement) {
                    pomNode.dependencyManagement[0].replaceNode {}
                }

                pomNode.children().last() + {
                    delegate.name 'hoist-core'
                    delegate.description "Extremely Heavy Industry's toolkit for enterprise web applications."
                    delegate.url 'https://xh.io'
                    delegate.organization {
                        delegate.name 'Extremely Heavy Industries'
                        delegate.url 'https://xh.io'
                    }
                    delegate.scm {
                        delegate.url "https://github.com/xh/hoist-core"
                        delegate.connection "scm:git@github.com:xh/hoist-core.git"
                        delegate.developerConnection "scm:git@github.com:xh/hoist-core.git"
                    }
                    delegate.issueManagement {
                        delegate.system "GitHub"
                        delegate.url "https://github.com/xh/hoist-core/issues"
                    }
                    delegate.developers {
                        delegate.developer {
                            delegate.id 'xh'
                            delegate.name 'Extremely Heavy Industries'
                            delegate.email 'info@xh.io'
                        }
                    }
                }

                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }

            from components.java
            artifact sourcesJar
            artifact javadocJar

            def groovyOutputDir = sourceSets.main.output.classesDirs.files.find{it.path.contains('/groovy/')}
            artifact source: "${groovyOutputDir}/META-INF/grails-plugin.xml",
                    classifier: 'plugin',
                    extension: 'xml'

            repositories {
                maven {
                    def repoEndpoint = version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'
                    url "https://repo.xh.io/content/repositories/$repoEndpoint/"
                    credentials {
                        username project.findProperty('xhRepoDeployUser')
                        password project.findProperty('xhRepoDeployPassword')
                    }
                }
            }
        }
    }
}

task publishHoistCore(dependsOn: 'publishHoistCorePublicationToMavenRepository') {
    group 'xhio'
    description 'Publishes a build to repo.xh.io.'
    doLast {
        println "Hoist $version published to repo.xh.io!"
    }
}
